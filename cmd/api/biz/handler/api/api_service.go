// Code generated by hertz generator.

package api

import (
	"context"
	"mini-tiktok-hanyongyan/cmd/api/biz/model/api"
	"mini-tiktok-hanyongyan/cmd/api/biz/rpc"
	userservice "mini-tiktok-hanyongyan/cmd/user/kitex_gen/userService"
	"mini-tiktok-hanyongyan/cmd/video/kitex_gen/videoService"
	"net/http"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Feed .
// @router /douyin/feed [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.FeedReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.FeedResp)

	c.JSON(consts.StatusOK, resp)
}

// UserRegister .
// @router /douyin/user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserRegisterReq
	var resp api.UserRegisterResp
	//  username and password bind req
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMessage = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	// 调用 userService 的服务 进行注册用户
	registerResponse, err := rpc.UserRpcClient.Register(ctx, &userservice.DouyinUserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	// 注册失败
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMessage = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.StatusCode = int64(registerResponse.StatusCode)
	resp.StatusMessage = registerResponse.StatusMsg
	resp.UserID = registerResponse.UserId
	resp.Token = registerResponse.Token

	c.JSON(consts.StatusOK, resp)
}

// UserLogin .
// @router /douyin/user/login [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserLoginReq
	var resp api.UserLoginResp
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	// 调用 userService 验证是否能够登陆成功
	response, err := rpc.UserRpcClient.Login(ctx,
		&userservice.DouyinUserLoginRequest{Password: req.Password, Username: req.Username})
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMessage = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.StatusCode = 0
	resp.Token = response.Token
	resp.StatusMessage = response.StatusMsg
	resp.UserID = response.UserId
	c.JSON(consts.StatusOK, resp)
}

// User .
// @router /douyin/user [GET]
func User(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserReq
	resp := new(api.UserResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	userId, err := strconv.ParseInt(req.UserID, 10, 64)
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMessage = "传入数据错误"
		c.JSON(consts.StatusOK, resp)
		return
	}
	result, err := rpc.UserRpcClient.Info(ctx, &userservice.DouyinUserRequest{
		UserId: userId,
		Token:  req.Token,
	})
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMessage = "数据查询错误"
		c.JSON(consts.StatusOK, resp)
	}

	c.JSON(consts.StatusOK, result)
}

// PublishAction .
// @router /douyin/publish/action [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var req videoservice.DouyinPublishActionRequest
	req.Title = c.PostForm("title")
	req.Token = c.PostForm("token")

	// 获取上传的视频文件
	file, _ := c.FormFile("data")
	fd, _ := file.Open()
	// 将视频文件转为 byte 数组
	data := make([]byte, file.Size)
	fd.Read(data)
	fd.Close()
	req.Data = data
	if len(req.Title) == 0 {
		c.JSON(http.StatusOK, api.PublishActionResp{
			StatusCode:    1,
			StatusMessage: "视频标题不能为空",
		})
		return
	}

	resp, err := rpc.VideoRpcClient.PublishAction(ctx, &req)
	if err != nil {
		c.JSON(http.StatusOK, api.PublishActionResp{
			StatusCode:    1,
			StatusMessage: "视频上传失败",
		})
		return
	}
	resp.StatusCode = 0
	c.JSON(consts.StatusOK, resp)
}

// PublishList .
// @router /douyin/publish/list [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PublishActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.PublishListResp)

	c.JSON(consts.StatusOK, resp)
}

// FavoriteAction .
// @router /douyin/favorite/action [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.FavoriteActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.FavoriteActionResp)

	c.JSON(consts.StatusOK, resp)
}

// FavoriteList .
// @router /douyin/favorite/list [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.FavoriteListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.FavoriteListResp)

	c.JSON(consts.StatusOK, resp)
}

// CommentAction .
// @router /douyin/comment/action [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CommentActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.CommentActionResp)

	c.JSON(consts.StatusOK, resp)
}

// CommentList .
// @router /douyin/comment/list [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CommentListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.CommentListResp)

	c.JSON(consts.StatusOK, resp)
}

// RelationAction .
// @router /douyin/relation/action [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	// 关注操作
	var err error
	var req api.RelationActionReq
	var resp api.RelationActionResp
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.StatusMessage = err.Error()
		resp.StatusCode = 1
		return
	}
	toUserId, toUserIdErr := strconv.ParseInt(req.ToUserID, 10, 64)
	actionType, actionTypeErr := strconv.ParseInt(req.ActionType, 10, 32)
	if toUserIdErr != nil || actionTypeErr != nil {
		resp.StatusCode = 0
		resp.StatusMessage = "传入的参数错误"
		c.JSON(consts.StatusOK, resp)
		return
	}
	// userService 完成 关注操作
	result, err := rpc.UserRpcClient.Action(ctx, &userservice.DouyinRelationActionRequest{
		Token:      req.Token,
		ToUserId:   toUserId,
		ActionType: int32(actionType),
	})

	if err != nil {
		resp.StatusCode = 1
		resp.StatusMessage = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.StatusCode = 0
	resp.StatusMessage = result.StatusMsg
	c.JSON(consts.StatusOK, resp)
}

// RelationFollowList .
// @router /douyin/relation/follow/list [GET]
func RelationFollowList(ctx context.Context, c *app.RequestContext) {
	// 关注列表
	var err error
	var req api.RelationFollowListReq
	var resp api.RelationFollowListResp
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	userId, err := strconv.ParseInt(req.UserID, 10, 64)
	if err != nil {
		c.String(consts.StatusOK, "请求参数错误")
		return
	}
	result, err := rpc.UserRpcClient.FollowList(ctx, &userservice.DouyinRelationFollowListRequest{
		UserId: userId,
		Token:  req.Token,
	})
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMessage = "请求错误"
		c.JSON(consts.StatusOK, resp)
	}

	// 此处返回 result 是因为他和 resp 的数据结构类型一直，但是 user 所属的包结构不同，简写省略属性的转化
	c.JSON(consts.StatusOK, result)
}

// RelationFollowerList .
// @router /douyin/relation/follower/list [GET] 粉丝列表
func RelationFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationFollowerListReq
	var resp api.RelationFollowerListResp
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	userId, err := strconv.ParseInt(req.UserID, 10, 64)
	if err != nil {
		c.String(consts.StatusOK, "请求参数错误")
	}
	result, err := rpc.UserRpcClient.FollowerList(ctx, &userservice.DouyinRelationFollowerListRequest{
		UserId: userId,
		Token:  req.Token,
	})
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMessage = "请求失败"
		c.JSON(consts.StatusOK, resp)
	}

	c.JSON(consts.StatusOK, result)
}

// RelationFriendList .
// @router /douyin/relation/friend/list [GET]
func RelationFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationFriendListReq
	var resp api.RelationFriendListResp
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	userId, err := strconv.ParseInt(req.UserID, 10, 64)
	if err != nil {
		c.JSON(consts.StatusOK, "请求数据错误")
		return
	}
	result, err := rpc.UserRpcClient.FriendList(ctx, &userservice.DouyinRelationFriendListRequest{
		UserId: userId,
		Token:  req.Token,
	})
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMessage = err.Error()
		resp.UserList = nil
		c.JSON(consts.StatusOK, resp)
	}
	c.JSON(consts.StatusOK, result)
}
