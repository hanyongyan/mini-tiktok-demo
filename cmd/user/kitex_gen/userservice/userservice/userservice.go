// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	userservice "mini-tiktok-hanyongyan/cmd/user/kitex_gen/userservice"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*userservice.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Login":        kitex.NewMethodInfo(loginHandler, newUserServiceLoginArgs, newUserServiceLoginResult, false),
		"Register":     kitex.NewMethodInfo(registerHandler, newUserServiceRegisterArgs, newUserServiceRegisterResult, false),
		"Info":         kitex.NewMethodInfo(infoHandler, newUserServiceInfoArgs, newUserServiceInfoResult, false),
		"Action":       kitex.NewMethodInfo(actionHandler, newUserServiceActionArgs, newUserServiceActionResult, false),
		"FollowList":   kitex.NewMethodInfo(followListHandler, newUserServiceFollowListArgs, newUserServiceFollowListResult, false),
		"FollowerList": kitex.NewMethodInfo(followerListHandler, newUserServiceFollowerListArgs, newUserServiceFollowerListResult, false),
		"FriendList":   kitex.NewMethodInfo(friendListHandler, newUserServiceFriendListArgs, newUserServiceFriendListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "userservice",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userservice.UserServiceLoginArgs)
	realResult := result.(*userservice.UserServiceLoginResult)
	success, err := handler.(userservice.UserService).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLoginArgs() interface{} {
	return userservice.NewUserServiceLoginArgs()
}

func newUserServiceLoginResult() interface{} {
	return userservice.NewUserServiceLoginResult()
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userservice.UserServiceRegisterArgs)
	realResult := result.(*userservice.UserServiceRegisterResult)
	success, err := handler.(userservice.UserService).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceRegisterArgs() interface{} {
	return userservice.NewUserServiceRegisterArgs()
}

func newUserServiceRegisterResult() interface{} {
	return userservice.NewUserServiceRegisterResult()
}

func infoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userservice.UserServiceInfoArgs)
	realResult := result.(*userservice.UserServiceInfoResult)
	success, err := handler.(userservice.UserService).Info(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceInfoArgs() interface{} {
	return userservice.NewUserServiceInfoArgs()
}

func newUserServiceInfoResult() interface{} {
	return userservice.NewUserServiceInfoResult()
}

func actionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userservice.UserServiceActionArgs)
	realResult := result.(*userservice.UserServiceActionResult)
	success, err := handler.(userservice.UserService).Action(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceActionArgs() interface{} {
	return userservice.NewUserServiceActionArgs()
}

func newUserServiceActionResult() interface{} {
	return userservice.NewUserServiceActionResult()
}

func followListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userservice.UserServiceFollowListArgs)
	realResult := result.(*userservice.UserServiceFollowListResult)
	success, err := handler.(userservice.UserService).FollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFollowListArgs() interface{} {
	return userservice.NewUserServiceFollowListArgs()
}

func newUserServiceFollowListResult() interface{} {
	return userservice.NewUserServiceFollowListResult()
}

func followerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userservice.UserServiceFollowerListArgs)
	realResult := result.(*userservice.UserServiceFollowerListResult)
	success, err := handler.(userservice.UserService).FollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFollowerListArgs() interface{} {
	return userservice.NewUserServiceFollowerListArgs()
}

func newUserServiceFollowerListResult() interface{} {
	return userservice.NewUserServiceFollowerListResult()
}

func friendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userservice.UserServiceFriendListArgs)
	realResult := result.(*userservice.UserServiceFriendListResult)
	success, err := handler.(userservice.UserService).FriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFriendListArgs() interface{} {
	return userservice.NewUserServiceFriendListArgs()
}

func newUserServiceFriendListResult() interface{} {
	return userservice.NewUserServiceFriendListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Login(ctx context.Context, req *userservice.DouyinUserLoginRequest) (r *userservice.DouyinUserLoginResponse, err error) {
	var _args userservice.UserServiceLoginArgs
	_args.Req = req
	var _result userservice.UserServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Register(ctx context.Context, req *userservice.DouyinUserRegisterRequest) (r *userservice.DouyinUserRegisterResponse, err error) {
	var _args userservice.UserServiceRegisterArgs
	_args.Req = req
	var _result userservice.UserServiceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Info(ctx context.Context, req *userservice.DouyinUserRequest) (r *userservice.DouyinUserResponse, err error) {
	var _args userservice.UserServiceInfoArgs
	_args.Req = req
	var _result userservice.UserServiceInfoResult
	if err = p.c.Call(ctx, "Info", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Action(ctx context.Context, req *userservice.DouyinRelationActionRequest) (r *userservice.DouyinRelationActionResponse, err error) {
	var _args userservice.UserServiceActionArgs
	_args.Req = req
	var _result userservice.UserServiceActionResult
	if err = p.c.Call(ctx, "Action", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowList(ctx context.Context, req *userservice.DouyinRelationFollowListRequest) (r *userservice.DouyinRelationFollowListResponse, err error) {
	var _args userservice.UserServiceFollowListArgs
	_args.Req = req
	var _result userservice.UserServiceFollowListResult
	if err = p.c.Call(ctx, "FollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerList(ctx context.Context, req *userservice.DouyinRelationFollowerListRequest) (r *userservice.DouyinRelationFollowerListResponse, err error) {
	var _args userservice.UserServiceFollowerListArgs
	_args.Req = req
	var _result userservice.UserServiceFollowerListResult
	if err = p.c.Call(ctx, "FollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FriendList(ctx context.Context, req *userservice.DouyinRelationFriendListRequest) (r *userservice.DouyinRelationFriendListResponse, err error) {
	var _args userservice.UserServiceFriendListArgs
	_args.Req = req
	var _result userservice.UserServiceFriendListResult
	if err = p.c.Call(ctx, "FriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
